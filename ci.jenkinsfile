#!groovy

@Library('jenkinslibrary') _

//func from shareibrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tool()

String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
// String deployHosts = "${env.deployHosts}"
String branchName = "${env.branchName}"
String srcUrl = "${env.getUrl}"


//pipeline
pipeline{
   // agent { node { label "build"}}
   agent any     
    stages{

        stage("CheckOut"){
            steps{
                script{
                    print("${branchName}")
                    print("获取代码")
					checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'b907f56d-56e1-4395-991d-5b0dab908551', url: "${srcUrl}"]]])
                }
            }
        }
		
		stage("Build"){
            steps{
                script{
					print("执行打包")
					build.Build(buildType,buildShell)
					tools.printMsg("打包完成","green")
				}
			}
		}
    }
    post {
        always{
            script{
                print("always")
            }
        }
        
        success{
            script{
                print("success")
                // if ("${runOpts}" == "GitlabPush"){
                //     gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                // }
                // toemail.Email("流水线成功",userEmail)
            
            }
        
        }
        failure{
            script{
                print("failure")
                // if ("${runOpts}" == "GitlabPush"){
                //     gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                // }
                // toemail.Email("流水线失败了！",userEmail)
            }
        }
        
        aborted{
            script{
                print("aborted")
                // if ("${runOpts}" == "GitlabPush"){
                //     gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                // }
               // toemail.Email("流水线被取消了！",userEmail)
            }
        
        }
    
    }
}
