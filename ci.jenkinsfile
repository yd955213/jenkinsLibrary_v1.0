#!groovy

@Library('jenkinslibrary') _

//func from shareibrary
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tool()
def toEmail = new org.devops.toEmail()
def sonar = new org.devops.sonarqube()
def sonarApi = new org.devops.sonarapi()

// 防止手动触发时，未生成runOpts变量
def runOpts


String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
// String deployHosts = "${env.deployHosts}"
String branchName = "${env.branchName}"
String srcUrl = "${env.gitURL}"

if("${runOpts}"=="githubPush"){
	branchName = branch - "refs/heads/"
}

currentBuild.description = "${userName} 提交了分支 ${branchName}，标注信息为：${message}"

//pipeline
pipeline{
   // agent { node { label "build"}}
   agent any     
    stages{

        stage("CheckOut"){
            steps{
                script{
			
					tools.printMsg("github地址：${srcUrl}","red")
					tools.printMsg("分支名称：${branchName}","green")
					tools.printMsg("获取代码","blue")
					checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'b907f56d-56e1-4395-991d-5b0dab908551', url: "${srcUrl}"]]])
                }
            }
        }
		stage("Build"){
            steps{
                script{
					tools.printMsg("执行打包","green1")
					build.Build(buildType,buildShell)
					tools.printMsg("打包完成","green")
				}
			}
		}
		stage("QA"){
            steps {
                script{
                    tools.PrintMes("搜索项目","green")
                    result = sonarApi.SerarchProject("${JOB_NAME}")
                    println(result)
                    
                    if (result == "false"){
                        println("${JOB_NAME}---项目不存在,准备创建项目---> ${JOB_NAME}！")
                        sonarApi.CreateProject("${JOB_NAME}")
                    } else {
                        println("${JOB_NAME}---项目已存在！")
                    }
                    
                    tools.PrintMes("配置项目质量规则","green")
                    qpName="${JOB_NAME}".split("-")[0]   //Sonar%20way
                    sonarApi.ConfigQualityProfiles("${JOB_NAME}","java",qpName)
                
                    tools.PrintMes("配置质量阈","green")
                    sonarApi.ConfigQualityGates("${JOB_NAME}",qpName)
                
                    tools.PrintMes("代码扫描","green")
                    sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src")
                    

                    sleep 30
                    tools.PrintMes("获取扫描结果","green")
                    result = sonarApi.GetProjectStatus("${JOB_NAME}")
                    
                    
                    println(result)
                    if (result.toString() == "ERROR"){
                        toemail.Email("代码质量阈错误！请及时修复！",userEmail)
                        error " 代码质量阈错误！请及时修复！"
                        
                        
                    } else {
                        println(result)
                    }

                }
           }
       }
    }
    post {
        always{
            script{
                print("always")
            }
        }
        
        success{
            script{
                print("success")
                // if ("${runOpts}" == "GitlabPush"){
                //     gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                // }
                toEmail.Email("流水线成功",userEmail)
            
            }
        
        }
        failure{
            script{
                print("failure")
                // if ("${runOpts}" == "GitlabPush"){
                //     gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                // }
                toEmail.Email("流水线失败了！",userEmail)
            }
        }
        
        aborted{
            script{
                print("aborted")
                // if ("${runOpts}" == "GitlabPush"){
                //     gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                // }
				toEmail.Email("流水线被取消了！",userEmail)
            }
        
        }
    
    }
}
